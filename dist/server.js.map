{"version":3,"file":"server.js","mappings":"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","sources":["webpack://hinachosteamsclient/./src/server/TeamsAppsComponents.ts?6a42","webpack://hinachosteamsclient/./src/server/dashboardTab/DashboardTab.ts?8d95","webpack://hinachosteamsclient/./src/server/hinachosTeamsClientBot/HinachosTeamsClientBot.ts?7d4f","webpack://hinachosteamsclient/./src/server/hinachosTeamsClientBot/cards/welcomeCard.ts?089d","webpack://hinachosteamsclient/./src/server/hinachosTeamsClientBot/dialogBot.ts?5812","webpack://hinachosteamsclient/./src/server/hinachosTeamsClientBot/dialogs/helpDialog.ts?f113","webpack://hinachosteamsclient/./src/server/hinachosTeamsClientBot/dialogs/mainDialog.ts?dd45","webpack://hinachosteamsclient/./src/server/hinachosTeamsClientBot/dialogs/mentionUserDialog.ts?7716","webpack://hinachosteamsclient/./src/server/hinachosTeamsClientBot/dialogs/teamsInfoDialog.ts?bf70","webpack://hinachosteamsclient/external commonjs \"botbuilder\"?9bd5","webpack://hinachosteamsclient/external commonjs \"botbuilder-dialogs\"?0e7e","webpack://hinachosteamsclient/external commonjs \"compression\"?e0c2","webpack://hinachosteamsclient/external commonjs \"debug\"?b525","webpack://hinachosteamsclient/external commonjs \"dotenv\"?3fba","webpack://hinachosteamsclient/external commonjs \"express\"?c4a6","webpack://hinachosteamsclient/external commonjs \"express-msteams-host\"?eac2","webpack://hinachosteamsclient/external commonjs \"morgan\"?66c0","webpack://hinachosteamsclient/external node-commonjs \"http\"?78d4","webpack://hinachosteamsclient/external node-commonjs \"path\"?1f34","[]","webpack://hinachosteamsclient/./src/server/server.ts?3175"],"sourcesContent":["// Components will be added here\nexport const nonce = {}; // Do not remove!\n// Automatically added for the dashboardTab tab\nexport * from \"./dashboardTab/DashboardTab\";\n// Automatically added for the hinachosTeamsClientBot bot\nexport * from \"./hinachosTeamsClientBot/HinachosTeamsClientBot\";\n","import { PreventIframe } from \"express-msteams-host\";\n\n/**\n * Used as place holder for the decorators\n */\n@PreventIframe(\"/dashboardTab/index.html\")\nexport class DashboardTab {\n}\n","import { BotDeclaration } from \"express-msteams-host\";\nimport * as debug from \"debug\";\nimport { CardFactory, ConversationState, MemoryStorage, UserState, TurnContext } from \"botbuilder\";\nimport { DialogBot } from \"./dialogBot\";\nimport { MainDialog } from \"./dialogs/mainDialog\";\nimport WelcomeCard from \"./cards/welcomeCard\";\n\n// Initialize debug logging module\nconst log = debug(\"msteams\");\n\n/**\n * Implementation for hinachos-teams-client-bot\n */\n  @BotDeclaration(\n      \"/api/messages\",\n      new MemoryStorage(),\n      // eslint-disable-next-line no-undef\n      process.env.MICROSOFT_APP_ID,\n      // eslint-disable-next-line no-undef\n      process.env.MICROSOFT_APP_PASSWORD)\n\nexport class HinachosTeamsClientBot extends DialogBot {\n    constructor(conversationState: ConversationState, userState: UserState) {\n        super(conversationState, userState, new MainDialog());\n\n        this.onMembersAdded(async (context, next) => {\n            const membersAdded = context.activity.membersAdded;\n            if (membersAdded && membersAdded.length > 0) {\n                for (let cnt = 0; cnt < membersAdded.length; cnt++) {\n                    if (membersAdded[cnt].id !== context.activity.recipient.id) {\n                        await this.sendWelcomeCard( context );\n                    }\n                }\n            }\n            await next();\n        });\n    }\n\n    public async sendWelcomeCard( context: TurnContext ): Promise<void> {\n        const welcomeCard = CardFactory.adaptiveCard(WelcomeCard);\n        await context.sendActivity({ attachments: [welcomeCard] });\n    }\n\n}\n","const WelcomeCard = require(\"./welcomeCard.json\");\nexport default WelcomeCard;\n","import {\n    ConversationState,\n    UserState,\n    TeamsActivityHandler,\n    TurnContext\n} from \"botbuilder\";\nimport { MainDialog } from \"./dialogs/mainDialog\";\n\nexport class DialogBot extends TeamsActivityHandler {\n    public dialogState: any;\n\n    constructor(public conversationState: ConversationState, public userState: UserState, public dialog: MainDialog) {\n        super();\n        this.conversationState = conversationState;\n        this.userState = userState;\n        this.dialog = dialog;\n        this.dialogState = this.conversationState.createProperty(\"DialogState\");\n\n        this.onMessage(async (context, next) => {\n            // Run the MainDialog with the new message Activity.\n            await this.dialog.run(context, this.dialogState);\n            await next();\n        });\n    }\n\n    public async run(context: TurnContext) {\n        await super.run(context);\n        // Save any state changes. The load happened during the execution of the Dialog.\n        await this.conversationState.saveChanges(context, false);\n        await this.userState.saveChanges(context, false);\n    }\n}\n","import {\n    ComponentDialog,\n    DialogSet,\n    DialogState,\n    DialogTurnResult,\n    DialogTurnStatus,\n    TextPrompt,\n    WaterfallDialog,\n    WaterfallStepContext\n} from \"botbuilder-dialogs\";\nimport {\n    MessageFactory,\n    StatePropertyAccessor,\n    TurnContext\n} from \"botbuilder\";\n\nconst HELP_DIALOG_ID = \"helpDialog\";\nconst HELP_WATERFALL_DIALOG_ID = \"helpWaterfallDialog\";\n\nexport class HelpDialog extends ComponentDialog {\n    constructor() {\n        super(HELP_DIALOG_ID);\n        this.addDialog(new TextPrompt(\"TextPrompt\"))\n            .addDialog(new WaterfallDialog(HELP_WATERFALL_DIALOG_ID, [\n                this.introStep.bind(this)\n            ]));\n        this.initialDialogId = HELP_WATERFALL_DIALOG_ID;\n    }\n\n    public async run(context: TurnContext, accessor: StatePropertyAccessor<DialogState>) {\n        const dialogSet = new DialogSet(accessor);\n        dialogSet.add(this);\n        const dialogContext = await dialogSet.createContext(context);\n        const results = await dialogContext.continueDialog();\n        if (results.status === DialogTurnStatus.empty) {\n            await dialogContext.beginDialog(this.id);\n        }\n    }\n\n    private async introStep(stepContext: WaterfallStepContext): Promise<DialogTurnResult> {\n        const message = MessageFactory.text(\"I am terribly sorry, but my developer hasn't trained me to do anything yet 😂. Please refer to [this link](https://docs.microsoft.com/en-us/microsoftteams/platform/bots/what-are-bots) to see how to develop bots for Teams\");\n        await stepContext.context.sendActivity(message);\n        return await stepContext.endDialog();\n    }\n}\n","import {\n    ComponentDialog,\n    DialogSet,\n    DialogState,\n    DialogTurnResult,\n    DialogTurnStatus,\n    TextPrompt,\n    WaterfallDialog,\n    WaterfallStepContext\n} from \"botbuilder-dialogs\";\nimport {\n    MessageFactory,\n    StatePropertyAccessor,\n    InputHints,\n    TurnContext\n} from \"botbuilder\";\nimport { TeamsInfoDialog } from \"./teamsInfoDialog\";\nimport { HelpDialog } from \"./helpDialog\";\nimport { MentionUserDialog } from \"./mentionUserDialog\";\n\nconst MAIN_DIALOG_ID = \"mainDialog\";\nconst MAIN_WATERFALL_DIALOG_ID = \"mainWaterfallDialog\";\n\nexport class MainDialog extends ComponentDialog {\n    public onboarding: boolean;\n    constructor() {\n        super(MAIN_DIALOG_ID);\n        this.addDialog(new TextPrompt(\"TextPrompt\"))\n            .addDialog(new TeamsInfoDialog())\n            .addDialog(new HelpDialog())\n            .addDialog(new MentionUserDialog())\n            .addDialog(new WaterfallDialog(MAIN_WATERFALL_DIALOG_ID, [\n                this.introStep.bind(this),\n                this.actStep.bind(this),\n                this.finalStep.bind(this)\n            ]));\n        this.initialDialogId = MAIN_WATERFALL_DIALOG_ID;\n        this.onboarding = false;\n    }\n\n    public async run(context: TurnContext, accessor: StatePropertyAccessor<DialogState>) {\n        const dialogSet = new DialogSet(accessor);\n        dialogSet.add(this);\n        const dialogContext = await dialogSet.createContext(context);\n        const results = await dialogContext.continueDialog();\n        if (results.status === DialogTurnStatus.empty) {\n            await dialogContext.beginDialog(this.id);\n        }\n    }\n\n    private async introStep(stepContext: WaterfallStepContext): Promise<DialogTurnResult> {\n        if ((stepContext.options as any).restartMsg) {\n            const messageText = (stepContext.options as any).restartMsg ? (stepContext.options as any).restartMsg : \"What can I help you with today?\";\n            const promptMessage = MessageFactory.text(messageText, messageText, InputHints.ExpectingInput);\n            return await stepContext.prompt(\"TextPrompt\", { prompt: promptMessage });\n        } else {\n            this.onboarding = true;\n            return await stepContext.next();\n        }\n    }\n\n    private async actStep(stepContext: WaterfallStepContext): Promise<DialogTurnResult> {\n        if (stepContext.result) {\n            /*\n            ** This is where you would add LUIS to your bot, see this link for more information:\n            ** https://docs.microsoft.com/en-us/azure/bot-service/bot-builder-howto-v4-luis?view=azure-bot-service-4.0&tabs=javascript\n            */\n            const result = stepContext.result.trim().toLocaleLowerCase();\n            switch (result) {\n                case \"who\" :\n                case \"who am i?\": {\n                    return await stepContext.beginDialog(\"teamsInfoDialog\");\n                }\n                case \"get help\":\n                case \"help\": {\n                    return await stepContext.beginDialog(\"helpDialog\");\n                }\n                case \"mention me\":\n                case \"mention\": {\n                    return await stepContext.beginDialog(\"mentionUserDialog\");\n                }\n                default: {\n                    await stepContext.context.sendActivity(\"Ok, maybe next time 😉\");\n                    return await stepContext.next();\n                }\n            }\n        } else if (this.onboarding) {\n            switch (stepContext.context.activity.text) {\n                case \"who\": {\n                    return await stepContext.beginDialog(\"teamsInfoDialog\");\n                }\n                case \"help\": {\n                    return await stepContext.beginDialog(\"helpDialog\");\n                }\n                case \"mention\": {\n                    return await stepContext.beginDialog(\"mentionUserDialog\");\n                }\n                default: {\n                    await stepContext.context.sendActivity(\"Ok, maybe next time 😉\");\n                    return await stepContext.next();\n                }\n            }\n        }\n        return await stepContext.next();\n    }\n\n    private async finalStep(stepContext: WaterfallStepContext): Promise<DialogTurnResult> {\n        return await stepContext.replaceDialog(this.initialDialogId, { restartMsg: \"What else can I do for you?\" });\n    }\n}\n","import {\n    ComponentDialog,\n    DialogSet,\n    DialogState,\n    DialogTurnResult,\n    DialogTurnStatus,\n    TextPrompt,\n    WaterfallDialog,\n    WaterfallStepContext\n} from \"botbuilder-dialogs\";\nimport {\n    MessageFactory,\n    StatePropertyAccessor,\n    TurnContext\n} from \"botbuilder\";\n\nconst MENTION_DIALOG_ID = \"mentionUserDialog\";\nconst MENTION_WATERFALL_DIALOG_ID = \"mentionUserWaterfallDialog\";\n\nexport class MentionUserDialog extends ComponentDialog {\n    constructor() {\n        super(MENTION_DIALOG_ID);\n        this.addDialog(new TextPrompt(\"TextPrompt\"))\n            .addDialog(new WaterfallDialog(MENTION_WATERFALL_DIALOG_ID, [\n                this.introStep.bind(this)\n            ]));\n        this.initialDialogId = MENTION_WATERFALL_DIALOG_ID;\n    }\n\n    public async run(context: TurnContext, accessor: StatePropertyAccessor<DialogState>) {\n        const dialogSet = new DialogSet(accessor);\n        dialogSet.add(this);\n        const dialogContext = await dialogSet.createContext(context);\n        const results = await dialogContext.continueDialog();\n        if (results.status === DialogTurnStatus.empty) {\n            await dialogContext.beginDialog(this.id);\n        }\n    }\n\n    private async introStep(stepContext: WaterfallStepContext): Promise<DialogTurnResult> {\n        const mention = {\n            mentioned: stepContext.context.activity.from,\n            text: `<at>${new TextEncoder().encode(stepContext.context.activity.from.name)}</at>`,\n            type: \"mention\"\n        };\n        const replyActivity = MessageFactory.text(`Hi ${mention.text}`);\n        replyActivity.entities = [mention];\n        await stepContext.context.sendActivity(replyActivity);\n        return await stepContext.endDialog();\n    }\n}\n","import {\n    ComponentDialog,\n    DialogSet,\n    DialogState,\n    DialogTurnResult,\n    DialogTurnStatus,\n    TextPrompt,\n    WaterfallDialog,\n    WaterfallStepContext\n} from \"botbuilder-dialogs\";\nimport {\n    MessageFactory,\n    StatePropertyAccessor,\n    TeamsInfo,\n    TurnContext\n} from \"botbuilder\";\n\nconst TEAMS_INFO_DIALOG_ID = \"teamsInfoDialog\";\nconst TEAMS_INFO_WATERFALL_DIALOG_ID = \"teamsInfoWaterfallDialog\";\nlet teamsUserInfo;\n\nexport class TeamsInfoDialog extends ComponentDialog {\n    constructor() {\n        super(TEAMS_INFO_DIALOG_ID);\n        this.addDialog(new TextPrompt(\"TextPrompt\"))\n            .addDialog(new WaterfallDialog(TEAMS_INFO_WATERFALL_DIALOG_ID, [\n                this.introStep.bind(this),\n                this.actStep.bind(this),\n                this.finalStep.bind(this)\n            ]));\n        this.initialDialogId = TEAMS_INFO_WATERFALL_DIALOG_ID;\n    }\n\n    public async run(context: TurnContext, accessor: StatePropertyAccessor<DialogState>) {\n        const dialogSet = new DialogSet(accessor);\n        dialogSet.add(this);\n        const dialogContext = await dialogSet.createContext(context);\n        const results = await dialogContext.continueDialog();\n        if (results.status === DialogTurnStatus.empty) {\n            await dialogContext.beginDialog(this.id);\n        }\n    }\n\n    private async introStep(stepContext: WaterfallStepContext): Promise<DialogTurnResult> {\n        const promptMessage = MessageFactory.text(\"Do you want me to send you the current Teams member info?\\n\\nSay **yes** if you do like to see the context or **no** if you don't\");\n        return await stepContext.prompt(\"TextPrompt\", { prompt: promptMessage });\n    }\n\n    private async actStep(stepContext: WaterfallStepContext): Promise<DialogTurnResult> {\n        if (stepContext.result) {\n            const result = stepContext.result;\n            switch (result) {\n                case \"yes\": {\n                    teamsUserInfo = await TeamsInfo.getMember(stepContext.context, stepContext.context.activity.from.id);\n                    await stepContext.context.sendActivity(`Your name: **${teamsUserInfo.name}**\\n\\nYour Teams ID: **${teamsUserInfo.id}**\\n\\nYour email: **${teamsUserInfo.email}**`);\n                    break;\n                }\n                default: {\n                    await stepContext.context.sendActivity(\"Ok, maybe next time 😉\");\n                    return await stepContext.next();\n                }\n            }\n        }\n        return await stepContext.next();\n    }\n\n    private async finalStep(stepContext: WaterfallStepContext): Promise<DialogTurnResult> {\n        await stepContext.context.sendActivity(\"Now it's time to add more functionality to your bot, so head over to the [docs](https://aka.ms/yoTeams) and start building\");\n        return await stepContext.endDialog();\n    }\n}\n","module.exports = require(\"botbuilder\");","module.exports = require(\"botbuilder-dialogs\");","module.exports = require(\"compression\");","module.exports = require(\"debug\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"express-msteams-host\");","module.exports = require(\"morgan\");","module.exports = require(\"http\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as Express from \"express\";\nimport * as http from \"http\";\nimport * as path from \"path\";\nimport * as morgan from \"morgan\";\nimport { MsTeamsApiRouter, MsTeamsPageRouter } from \"express-msteams-host\";\nimport * as debug from \"debug\";\nimport * as compression from \"compression\";\n\n// Initialize debug logging module\nconst log = debug(\"msteams\");\n\nlog(\"Initializing Microsoft Teams Express hosted App...\");\n\n// Initialize dotenv, to use .env file settings if existing\nrequire(\"dotenv\").config();\n\n// The import of components has to be done AFTER the dotenv config\n// eslint-disable-next-line import/first\nimport * as allComponents from \"./TeamsAppsComponents\";\n\n// Create the Express webserver\nconst express = Express();\nconst port = process.env.port || process.env.PORT || 3007;\n\n// Inject the raw request body onto the request object\nexpress.use(Express.json({\n    verify: (req, res, buf: Buffer, encoding: string): void => {\n        (req as any).rawBody = buf.toString();\n    }\n}));\nexpress.use(Express.urlencoded({ extended: true }));\n\n// Express configuration\nexpress.set(\"views\", path.join(__dirname, \"/\"));\n\n// Add simple logging\nexpress.use(morgan(\"tiny\"));\n\n// Add compression - uncomment to remove compression\nexpress.use(compression());\n\n// Add /scripts and /assets as static folders\nexpress.use(\"/scripts\", Express.static(path.join(__dirname, \"web/scripts\")));\nexpress.use(\"/assets\", Express.static(path.join(__dirname, \"web/assets\")));\n\n// routing for bots, connectors and incoming web hooks - based on the decorators\n// For more information see: https://www.npmjs.com/package/express-msteams-host\nexpress.use(MsTeamsApiRouter(allComponents));\n\n// routing for pages for tabs and connector configuration\n// For more information see: https://www.npmjs.com/package/express-msteams-host\nexpress.use(MsTeamsPageRouter({\n    root: path.join(__dirname, \"web/\"),\n    components: allComponents\n}));\n\n// Set default web page\nexpress.use(\"/\", Express.static(path.join(__dirname, \"web/\"), {\n    index: \"index.html\"\n}));\n\n// Set the port\nexpress.set(\"port\", port);\n\n// Start the webserver\nhttp.createServer(express).listen(port, () => {\n    log(`Server running on ${port}`);\n});\n"],"names":["nonce","DashboardTab","PreventIframe","debug","HinachosTeamsClientBot","DialogBot","constructor","conversationState","userState","super","MainDialog","this","onMembersAdded","context","next","membersAdded","activity","length","cnt","id","recipient","sendWelcomeCard","welcomeCard","CardFactory","adaptiveCard","sendActivity","attachments","BotDeclaration","MemoryStorage","process","env","MICROSOFT_APP_ID","MICROSOFT_APP_PASSWORD","WelcomeCard","TeamsActivityHandler","dialog","dialogState","createProperty","onMessage","run","saveChanges","HELP_WATERFALL_DIALOG_ID","HelpDialog","ComponentDialog","addDialog","TextPrompt","WaterfallDialog","introStep","bind","initialDialogId","accessor","dialogSet","DialogSet","add","dialogContext","createContext","continueDialog","status","DialogTurnStatus","empty","beginDialog","stepContext","message","MessageFactory","text","endDialog","MAIN_WATERFALL_DIALOG_ID","TeamsInfoDialog","MentionUserDialog","actStep","finalStep","onboarding","options","restartMsg","messageText","promptMessage","InputHints","ExpectingInput","prompt","result","trim","toLocaleLowerCase","replaceDialog","MENTION_WATERFALL_DIALOG_ID","mention","mentioned","from","TextEncoder","encode","name","type","replyActivity","entities","TEAMS_INFO_WATERFALL_DIALOG_ID","teamsUserInfo","TeamsInfo","getMember","email","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call","log","express","Express","port","PORT","use","json","verify","req","res","buf","encoding","rawBody","toString","urlencoded","extended","set","path","join","__dirname","morgan","compression","static","MsTeamsApiRouter","allComponents","MsTeamsPageRouter","root","components","index","http","createServer","listen"],"sourceRoot":""}